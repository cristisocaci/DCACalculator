@page "/investmentplans/create"
@using DCACalculator.Models
@using DCACalculator.Services
@using Microsoft.EntityFrameworkCore
@using DCACalculator.Entities
@inject IDbContextFactory<DCACalculator.DCAContext> DbFactory
@inject NavigationManager NavigationManager
@inject DCAInvestmentPlanService dcaService

<PageTitle>Create Investment Plans</PageTitle>

<h2>Create Investment Plans</h2>

<hr />
<div class="row">
    <div class="col-md-5">
        <EditForm method="post" Model="InvestmentPlan" @onsubmit:preventDefault  FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label d-block">Investments:</label>
                @foreach(var investment in Investments)
                {
                    <div key="@investment.Symbol" class="d-flex flex-row gap-3 mb-3">
                        <InputSelect @bind-Value="investment.Symbol" class="form-control">
                            @foreach(var opt in AvailableCoins)
                            {
                                <option value="@opt">@opt</option>
                            }
                        </InputSelect>
                        <InputNumber @bind-Value="investment.AmountEur" class="form-control" />
                    </div>
                }
                <button class="btn btn-primary" @onclick="AddInvestment">Add</button>
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="InvestmentPlan.Name" class="form-control" /> 
                <ValidationMessage For="() => InvestmentPlan.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="startdate" class="form-label">Start Date:</label> 
                <InputDate id="startdate" @bind-Value="InvestmentPlan.StartDate" class="form-control"/> 
                <ValidationMessage For="() => InvestmentPlan.StartDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="enddate" class="form-label">End Date:</label> 
                <InputDate id="enddate" @bind-Value="InvestmentPlan.EndDate" class="form-control" /> 
                <ValidationMessage For="() => InvestmentPlan.EndDate" class="text-danger" /> 
            </div>            
            <ul class="mb-4">
                @foreach(var message in messageStore)
                {
                    <li class="text-danger">
                        - @message
                    </li>
                }
            </ul>
            <button type="submit" class="btn btn-primary" disabled="@AddingInvestmentPlan" @onclick="AddInvestmentPlan">Create</button>
        </EditForm>

    </div>
</div>

@code {
    private List<string> messageStore = [];

    private InvestmentPlan InvestmentPlan { get; set; } = new() 
    { 
        Name = "", 
        StartDate = DateOnly.FromDateTime(DateTime.Now), 
        EndDate = DateOnly.FromDateTime(DateTime.Now)
    };

    private List<Investment> Investments = [];

    private List<string> AvailableCoins = [];

    private bool AddingInvestmentPlan = false;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        AvailableCoins = await context.AvailableCoins.Select(x => x.Symbol).ToListAsync();
        Investments.Add(new()
        {
            Symbol = ""
        });

        await base.OnInitializedAsync();
    }

    private bool IsValid()
    {
        messageStore.Clear();

        using var context = DbFactory.CreateDbContext();

        if (!Investments.Where(x => !string.IsNullOrWhiteSpace(x.Symbol)).Any())
        {
            messageStore.Add("Please add investemnts");
            return false;
        }
        var symbols = Investments.Select(x => x.Symbol + "/USD").ToList();

        var historicalDataFiltered = context.HistoricalData
          .Where(x => symbols.Contains(x.Symbol))
          .GroupBy(x => x.Symbol)
          .AsQueryable();

        var maxDate = historicalDataFiltered.Select(x => x.Select(y => y.Date).Max()).Min();
        var minDate = historicalDataFiltered.Select(x => x.Select(y => y.Date).Min()).Max();

        if (string.IsNullOrWhiteSpace(InvestmentPlan.Name))
        {
            messageStore.Add("Please select a name");
        }
        if (InvestmentPlan.StartDate > InvestmentPlan.EndDate)
        {
            messageStore.Add("Start Date must be before End Date");
        }

        if (InvestmentPlan.StartDate > maxDate || InvestmentPlan.StartDate < minDate)
        {
            messageStore.Add($"Start Date must be between {minDate} and {maxDate}");
        }

        if (InvestmentPlan.EndDate > maxDate || InvestmentPlan.EndDate < minDate)
        {
            messageStore.Add($"End Date must be between {minDate} and {maxDate}");
        }
        if(Investments.Any(x => string.IsNullOrWhiteSpace(x.Symbol)))
        {
            messageStore.Add($"One of the investments has a missing symbol");
        }

        if (Investments.Any(x => x.AmountEur <= 0))
        {
            messageStore.Add($"One of the investments is lower than or equal to 0");
        }

        return !messageStore.Any();

    }

    private async Task AddInvestmentPlan()
    {
        if (!IsValid())
        {
            return;
        }
        AddingInvestmentPlan = true;
        await dcaService.SimulateInvestmentPlanResults(InvestmentPlan, Investments);
        NavigationManager.NavigateTo("/");
    }

    private void AddInvestment()
    {
        if (Investments.Any(x => x.Symbol == "")) return;

        Investments.Add(new()
        {
            Symbol = ""
        });
    }
}
