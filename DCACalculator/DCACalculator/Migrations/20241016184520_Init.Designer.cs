// <auto-generated />
using System;
using DCACalculator;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DCACalculator.Migrations
{
    [DbContext(typeof(DCAContext))]
    [Migration("20241016184520_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DCACalculator.Entities.AvailableCoin", b =>
                {
                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("symbol");

                    b.ToTable((string)null);

                    b.ToView("AvailableCoins", (string)null);
                });

            modelBuilder.Entity("DCACalculator.Entities.HistoricalData", b =>
                {
                    b.Property<float>("Close")
                        .HasColumnType("real")
                        .HasColumnName("close");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<float>("High")
                        .HasColumnType("real")
                        .HasColumnName("high");

                    b.Property<float>("Low")
                        .HasColumnType("real")
                        .HasColumnName("low");

                    b.Property<float>("Open")
                        .HasColumnType("real")
                        .HasColumnName("open");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("symbol");

                    b.HasIndex(new[] { "Date" }, "HistoricalData_date_IDX");

                    b.HasIndex(new[] { "Symbol" }, "HistoricalData_symbol_IDX");

                    b.ToTable("HistoricalData");
                });
#pragma warning restore 612, 618
        }
    }
}
